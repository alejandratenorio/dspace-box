---
- name: Creating directory for dspace download
  file:
    path: "{{ dspace_download_dir }}"
    state: directory
    owner: '{{work_user}}'
  become: true

- name: Creating directory for dspace installation
  file:
    path: "{{ dspace_install_dir }}"
    state: directory
    owner: '{{work_user}}'
  become: true
  
- name: Download the backend code from the gitrepo of DSpace
  git:
    repo: "{{ dspace_backend_url }}"
    dest: "{{ dspace_download_dir }}"
    version: "{{ dspace_version }}"
    force: yes
    clone: yes
    update: no
    
- name: remove dir
  shell: rm -rf /var/lib/tomcat{{ tomcat_short_version }}/webapps/*
  become: true

- name: Creating directory for dspace installation
  file:
    path: "/var/lib/tomcat{{ tomcat_short_version }}/webapps/{{ server_namespace | regex_replace('^/', '') | replace('/', '#') }}"
    state: directory
  become: true

- name: Creating directory for dspace installation
  file:
    path: "{{ dspace_install_dir }}"
    owner: '{{work_user}}'
    recurse: true
  become: true


- name: Modify and move the configuration to the  necessary destination
  copy: src='{{ dspace_download_dir }}/dspace/config/local.cfg.EXAMPLE' dest='{{ dspace_download_dir }}/dspace/config/local.cfg' remote_src=true follow=yes



- name: Adjust local.cfg
  lineinfile:
    path: "{{dspace_download_dir}}/dspace/config/local.cfg"
    line: "{{ item[1] }}"
    regexp: "{{ item[0] }}"
  loop:
    - [
        "^dspace.dir=",
        "dspace.dir={{ dspace_install_dir }}",
      ]
    - [
        "^db.url =",
        "db.url=jdbc:postgresql://localhost:5432/{{ db_name }}",
      ]
    - [
        "^db.username =",
        "db.username={{ db_username }}",
      ]
    - [
        "^db.password =",
        "db.password={{ db_password }}",
      ]
    - [
        "^dspace.server.url=",
        "dspace.server.url={{ public_server_url | regex_replace('/$', '') }}",
      ]
    - ["^dspace.ui.url=", "dspace.ui.url={{ public_client_url | regex_replace('/$', '') }}"]
    - [
        "^dspace.server.url = ",
        "dspace.server.url = {{ public_server_url | regex_replace('/$', '') }}",
      ]
    - ["^dspace.ui.url = ", "dspace.ui.url = {{ public_client_url | regex_replace('/$', '') }}"]
    - ["^dspace.dir = ", "dspace.dir={{ dspace_install_dir }}"]
    - ["^proxies.trusted.ipranges = ", "proxies.trusted.ipranges=${dspace.ui.url}, 127.0.0.1"]

- name: adjust more
  lineinfile:
    line: "dspace.ui.url = {{ public_client_url | regex_replace('/$', '') }}"
    path: "{{dspace_download_dir}}/dspace/config/local.cfg"
    insertafter: EOF

- name: create directory for dspace installation
  file:
    path: '{{ dspace_install_dir }}'
    state: directory
    owner: '{{work_user}}'
  become: true

- name: Give permission to the dspace user
  file:
    path: '{{ dspace_install_dir }}'
    owner: '{{work_user}}'
    recurse: true
  become: true

- name: Create symbolic link 
  file:
    src: '/opt/ant/apache-ant-{{ ant_version }}/bin/ant'
    dest: /usr/bin/ant
    state: link  
    force: yes  
  become: true 

- name: Run 'mvn pkg' command to build dspace
  shell: mvn -U clean package
  become: true
  args: 
    chdir: '{{ dspace_download_dir }}'

- name: Give permission to the dspace user
  file:
    path: '{{ dspace_install_dir }}'
    owner: '{{work_user}}'
    recurse: true  
  become: true

- name: Give permission to the dspace user
  file:
    path: '{{ dspace_install_dir }}'
    owner: '{{work_user}}'
    recurse: true  
  become: true


# - name: Check db whether able to login
#   shell: psql postgresql://dspace:dspace@localhost:5432/dspace

- name: Install dspace by using ant
  shell: ant update
  args:
    chdir: '{{ dspace_download_dir }}/dspace/target/dspace-installer'
  become: true


# - name: Copy a folders
#   ansible.builtin.copy:
#     src: /dspace/webapps/
#     dest: '{{ tomcat_install_dir }}/apache-tomcat-{{ tomcat_version }}/webapps'
#     directory_mode: yes
#     remote_src: yes
#     follow: yes
#   become: true

# - name: Check and add env vars
#   shell: '{{ tomcat_install_dir}}/apache-tomcat-{{ tomcat_version }}/bin/catalina.sh start'
- name: Copy a folders
  ansible.builtin.copy:
    src: '{{ dspace_install_dir }}/webapps/server/'
    dest: '/var/lib/tomcat9/webapps/{{ server_namespace | regex_replace("^/", "") | replace("/", "#") }}'
    directory_mode: yes
    remote_src: yes
    follow: yes
  become: true
  
- name: check backend
  shell: 'cd /var/lib/tomcat9/webapps/ && ls -l && cd /var/lib/tomcat9/webapps/{{ server_namespace | regex_replace("^/", "") | replace("/", "#") }} && ls -l'
  become: true

- name: Give permission to the dspace user
  file:
    path: /var/lib/tomcat9/webapps
    owner: '{{work_user}}'
    recurse: true  
  become: true  

- name: Start and enable Tomcat service
  systemd:
    name: tomcat9
    state: restarted
    enabled: true
  become: true


- name: Copy a folders solr cores
  ansible.builtin.copy:
    src: '{{ dspace_install_dir }}/solr/'
    dest: '{{ solr_install_dir}}/solr-{{ solr_version }}/server/solr/configsets'
    remote_src: yes
    directory_mode: yes
  become: true

- name: Creating directory for dspace installation
  file:
    path: "{{ solr_install_dir }}"
    owner: '{{work_user}}'
    recurse: true
  become: true 

- name: Ensure solr is started and enabled on boot.
  become: true
  shell: /opt/solr/solr-{{ solr_version }}/bin/solr restart -force &
  args:
    warn: false 

- name: Copy rc cfg file
  copy:
    src: "../files/rc-local.service"
    dest: "/etc/systemd/system/rc-local.service"
    follow: yes   
  become: true 


- name: Copy rc-local cfg file
  template:
    src: "../files/rc.local"
    dest: "/etc/rc.local"
    mode: +x
    follow: yes 
  become: true

- name: restart services script injected
  systemd:
    enabled: true
    name: rc-local  
  become: true  

- name: Give permission to the dspace user
  file:
    path: '{{ dspace_install_dir }}'
    owner: '{{ work_user }}'
    recurse: true  
    state: directory
  become: true  

- name: Initialize your Database
  shell: '{{ dspace_install_dir }}/bin/dspace database migrate'

- name: Create dspace user
  shell: '{{ dspace_install_dir }}/bin/dspace create-administrator -e {{ admin_email }} -f {{ admin_first_name }} -l {{ admin_last_name }} -p {{ admin_password }} -c en'
#   become: true
  
- name: Create dspace users
  shell: '{{ dspace_install_dir }}/bin/dspace create-administrator -e {{ item.email }} -f {{ item.first_name }} -l {{ item.last_name }} -p {{ item.password }} -c en'
  with_items:
    - "{{ dspace_users }}" 
#   become: true
  
- name: Give permission to the dspace user
  file:
    path: '{{ dspace_install_dir }}'
    owner: '{{ work_user }}'
    group: '{{ tomcat_user }}'
    recurse: true  
    state: directory
  become: true  

- name: Test REST conn
  shell: yarn test:rest
  args:
    chdir: '{{ angular_home_dir }}'
    
